{"version":3,"sources":["components/Formulario.js","components/Cita.js","App.js","reportWebVitals.js","index.js"],"names":["Formulario","crearCita","useState","mascota","propietario","fecha","hora","sintomas","cita","actualizarCita","error","actualizarError","actualizarState","e","target","name","value","className","onSubmit","preventDefault","trim","id","uuidv4","type","placeholder","onChange","Cita","eliminarCita","onClick","App","citasIniciales","JSON","parse","localStorage","getItem","citas","guardarCitas","useEffect","setItem","stringify","nuevasCitas","filter","length","map","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7fc3fc3c.chunk.js","sourcesContent":["import React, {Fragment, useState} from \"react\";\r\nimport {v4 as uuidv4} from 'uuid';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Formulario = ( {crearCita} ) => {\r\n\r\n    //crear state citas\r\n    const [cita, actualizarCita] = useState({\r\n        mascota: '',\r\n        propietario: '',\r\n        fecha: '',\r\n        hora: '',\r\n        sintomas: ''\r\n    });\r\n\r\n    const [error, actualizarError] = useState(false);\r\n\r\n    //funcion que se ejecuta cuando el usuario escribe\r\n\r\n    const actualizarState = (e) => {\r\n        actualizarCita({\r\n            ...cita,\r\n            [e.target.name] : e.target.value\r\n        })\r\n    }\r\n\r\n    //extraer los valores\r\n    const { mascota, propietario, fecha, hora, sintomas } = cita;\r\n\r\n    //cuando presiona agregar cita\r\n    const submitCita = (e)=>{\r\n        e.preventDefault();\r\n\r\n        //validar\r\n        if(mascota.trim() === '' || propietario.trim() === '' || fecha.trim() === '' || hora.trim() === '' || sintomas.trim() === ''){\r\n            actualizarError(true);\r\n            return;\r\n        }\r\n\r\n        //eliminar mensaje error\r\n        actualizarError(false);\r\n\r\n        //asignar ID\r\n        cita.id = uuidv4();;\r\n\r\n        //crear la cita\r\n        crearCita(cita);\r\n\r\n        //reiniciar el form\r\n        actualizarCita({\r\n            mascota: '',\r\n            propietario: '',\r\n            fecha: '',\r\n            hora: '',\r\n            sintomas: ''\r\n        });\r\n    }\r\n\r\n    return (\r\n        <Fragment>\r\n            <h2>Crear Cita</h2>\r\n\r\n            { error ? <p className=\"alerta-error\">Todos los campos son obligatorios</p> : null }\r\n\r\n            <form\r\n                onSubmit={submitCita}\r\n            >\r\n                <label>Nombre Mascota</label>\r\n                <input \r\n                    type=\"text\"  \r\n                    name=\"mascota\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={mascota}\r\n                />\r\n                <label>Nombre Dueño</label>\r\n                <input \r\n                    type=\"text\"  \r\n                    name=\"propietario\"\r\n                    className=\"u-full-width\"\r\n                    placeholder=\"Nombre Dueño de la Mascota\"\r\n                    onChange={actualizarState}\r\n                    value={propietario}\r\n                />\r\n                <label>Fecha</label>\r\n                <input \r\n                    type=\"date\"  \r\n                    name=\"fecha\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={fecha}\r\n                />\r\n                <label>Hora</label>\r\n                <input \r\n                    type=\"time\"  \r\n                    name=\"hora\"\r\n                    className=\"u-full-width\"\r\n                    onChange={actualizarState}\r\n                    value={hora}\r\n                />\r\n                <label>Síntomas</label>\r\n                <textarea\r\n                    className=\"u-full-width\"\r\n                    name=\"sintomas\"\r\n                    onChange={actualizarState}\r\n                    value={sintomas}\r\n                ></textarea>\r\n\r\n                <button\r\n                    type=\"submit\"\r\n                    className=\"u-full-width button-primary\"\r\n                >\r\n                    Agregar Cita\r\n                </button>\r\n            </form>\r\n        </Fragment>\r\n    );\r\n}\r\n\r\nFormulario.propTypes = {\r\n    crearCita: PropTypes.func.isRequired\r\n}\r\n\r\nexport default Formulario;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Cita = ({cita, eliminarCita}) => (\r\n    <div className=\"cita\">\r\n        <p>Mascota: <span>{cita.mascota}</span></p>\r\n        <p>Dueño: <span>{cita.propietario}</span></p>\r\n        <p>Fecha: <span>{cita.fecha}</span></p>\r\n        <p>Hora: <span>{cita.hora}</span></p>\r\n        <p>Sintomas: <span>{cita.sintomas}</span></p>\r\n\r\n        <button\r\n            className=\"button eliminar u-full-width\"\r\n            onClick={()=> eliminarCita(cita.id)}\r\n        >Eliminar &times;</button>\r\n    </div>\r\n);\r\nCita.propTypes = {\r\n    cita: PropTypes.object.isRequired,\r\n    eliminarCita: PropTypes.func.isRequired\r\n}\r\nexport default Cita;\r\n","import React, { Fragment, useState, useEffect } from 'react';\nimport Formulario from './components/Formulario';\nimport Cita from './components/Cita';\n\nfunction App() {\n\n  //citas en localstorage\n  let citasIniciales = JSON.parse(localStorage.getItem('citas'));\n  if(!citasIniciales){\n    citasIniciales = [];\n  }\n\n  //arreglo de citas\n  const [citas, guardarCitas] = useState(citasIniciales);\n\n  //useEffect \n  useEffect( () => {\n    if(citasIniciales){\n      localStorage.setItem('citas', JSON.stringify(citas));\n    }\n  }, [citas, citasIniciales]);\n\n  //funcion que tome las citas actuales y agregue la nueva\n  const crearCita = cita => {\n    guardarCitas([...citas,cita]);\n  }\n\n  //elimnar cita por ID\n  const eliminarCita = id => {\n    const nuevasCitas = citas.filter(cita=> cita.id !== id);\n    guardarCitas(nuevasCitas);\n  }\n  //mensaje condicional\n  \n\n  return (\n    <Fragment>\n      <h1>Administrador de Pacientes</h1>  \n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"one-half column\">\n            <Formulario\n              crearCita={crearCita}\n            />\n          </div>\n          <div className=\"one-half column\">\n            { citas.length !== 0 ? <h2>Administra tus Citas</h2> : <h2>Crea una nueva Cita</h2> }\n            {citas.map(cita => (\n              <Cita\n                key={cita.id}\n                cita={cita}\n                eliminarCita={eliminarCita}\n              />\n            ))}\n          </div>\n        </div>\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}